<ShaderProgram>
<Shader type="GL_VERTEX_SHADER">
#version 330

layout(location = 0) in vec3  aPosition;
layout(location = 2) in vec3  aColor;
layout(location = 1) in float aBulbRadius;
layout(location = 3) in float aCutoffRadius;

uniform mat4 uProjectionMatrix;

const vec3 gOffsets[10] = vec3[](
vec3(+0.0000,+0.0000,-1), 
vec3(-1.0000,+0.3742,+0), 
vec3(-0.3742,+1.0000,+0), 
vec3(+0.3742,+1.0000,+0), 
vec3(+1.0000,+0.3742,+0),
vec3(+1.0000,-0.3742,+0), 
vec3(+0.3742,-1.0000,+0),  
vec3(-0.3742,-1.0000,+0),  
vec3(-1.0000,-0.3742,+0), 
vec3(-1.0000,+0.3742,+0)
);

out vec3  vLightPos;
out vec3  vLightColor;
out float vBulbRadius;
out float vCutoffRadius;


void main()
{
	vLightPos     = aPosition;
	vLightColor   = aColor;
	vBulbRadius   = aBulbRadius;
	vCutoffRadius = aCutoffRadius;
	
	gl_Position = uProjectionMatrix*vec4(aPosition + aCutoffRadius*gOffsets[gl_VertexID], 1);
	gl_Position /= gl_Position.w;
	gl_Position.z = 0;
}
</Shader>
<Shader file_name="cook-torrance.shader" />
<Shader file_name="read-geom-data.shader" />
<Shader type="GL_FRAGMENT_SHADER">
#version 330

//uniform vec2 uTexelSize;

in vec3  vLightPos;
in vec3  vLightColor;
in float vBulbRadius;
in float vCutoffRadius;

in vec2 vTexCoord;

layout(location = 0) out vec3 oColor;

struct Material
{
  float roughness;
  vec3  diffuse_color;
  vec3  specular_color;
};

bool GetGeomData(vec2 texCoord, out vec4 position, out vec3 normal, out Material mat);
vec3 BRDF(vec3 n, vec3 l, vec3 v, Material mat);

void main()
{	
	vec4 position;
	vec3 normal;
	Material mat;
	if(GetGeomData(vTexCoord, position, normal, mat))
	{
		oColor = vec3(0);
		return;
	}
	
	vec3 ligthDirection = position.xyz-vLightPos;
	float ligthDistance = length(ligthDirection);
	ligthDirection /= ligthDistance;

	float att = (1 + ligthDistance/vBulbRadius)/(1 + 1/vBulbRadius);
	att = smoothstep(vCutoffRadius, 0.8*vCutoffRadius, ligthDistance)/(att*att);

	oColor.rgb = vLightColor*att*BRDF(normal, -ligthDirection, -normalize(position.xyz), mat);
}
</Shader>
</ShaderProgram>
