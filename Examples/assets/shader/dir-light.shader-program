<ShaderProgram>
<Shader type="GL_VERTEX_SHADER">
#version 330

const vec2 g_vectices[4]  =  vec2[](vec2(-1,-1), vec2(+1,-1), vec2(-1,+1), vec2(+1,+1));
const vec2 g_texCoords[4] = vec2[](vec2(0,0), vec2(1,0), vec2(0,1), vec2(1,1));

out vec2 vTexCoord;

void main()
{
	gl_Position = vec4( g_vectices[gl_VertexID], 0, 1);
	vTexCoord    = g_texCoords[gl_VertexID];
}
</Shader>
<Shader file_name="cook-torrance.shader" />
<Shader file_name="read-geom-data.shader" />
<Shader type="GL_FRAGMENT_SHADER">
#version 330

uniform vec3 uLigthColor;
uniform vec3 uLigthDir;

in vec2 vTexCoord;

layout(location = 0) out vec3 oColor;

struct Material
{
  float roughness;
  vec3  diffuse_color;
  vec3  specular_color;
};

bool GetGeomData(vec2 texCoord, out vec4 position, out vec3 normal, out Material mat);
vec3 BRDF(vec3 n, vec3 l, vec3 v, Material mat);

void main()
{
	vec4 position;
	vec3 normal;
	Material mat;
	if(GetGeomData(vTexCoord, position, normal, mat))
	{
		oColor = max(uLigthColor*BRDF(normal, -normalize(uLigthDir), -normalize(position.xyz), mat),vec3(0));
	}
	else
	{
		oColor = vec3(0);
	}
}
</Shader>
</ShaderProgram>
