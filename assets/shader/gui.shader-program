<ShaderProgram>
  <Shader type="GL_VERTEX_SHADER">
    #version 330 compatibility

    layout(location = 0) in vec4  aPositions;
    layout(location = 1) in vec4  aTexCords;
    layout(location = 2) in vec4  aColor;
    layout(location = 3) in vec4  aData;

    uniform vec2 uViewPortSize;

    out vec2 vTexCoords;
    out vec4 vColor;
    out vec4 vData;

    const vec2 gOffsets[4] = vec2[](
		vec2( 0.0, 0.0 ),
		vec2( 1.0, 0.0 ),
		vec2( 0.0, 1.0 ),
		vec2( 1.0, 1.0 )
    );

    void main()
    {
		vec2 offset     = gOffsets[gl_VertexID];
		vec2 pos        = aPositions.xy + offset*aPositions.zw;
		gl_Position     = vec4(2*pos/uViewPortSize - vec2(1.0f), 0.0, 1.0 );
		vTexCoords      = aTexCords.xy + offset*aTexCords.zw;
		vColor          = aColor;
		vData           = aData;
    }
  </Shader>
  <Shader type="GL_FRAGMENT_SHADER">
    #version 330 compatibility

    in vec2 vTexCoords;
    in vec4 vColor;
    in vec4 vData;

    uniform sampler2D uFontTexture;
    uniform sampler2D uAtlasTexture;

    layout(location = 0) out vec4 oColor;

    void main()
    {
        oColor = vColor;
		switch(uint(vData.a)){
			case 0u: {
			} break;
			case 1u: {
				float dist = texture2D(uFontTexture, vTexCoords).r;
				//oColor.rgb *= dist;
				//oColor.a *= dist > 0.01f ? 1.0f : 0.0f;
				//oColor.a *= clamp((255.0f*dist - vData.x)/float(vData.y - vData.x), 0.0f, 1.0f);
				oColor.a *= smoothstep(vData.x, vData.y, 255.0f*dist);
			} break;
			case 2u: {
				vec4 mix = texture2D(uAtlasTexture, vTexCoords);
				oColor = mix;
				oColor.rgb += (vec3(1)-mix.rgb) *  vData.rgb / 255.0f;
			} break;
		}
    }
  </Shader>
</ShaderProgram>
